<?php

/**
 * @Author: Phu Hoang
 * @Date:   2016-01-11 13:19:26
 * @Last Modified by:   Phu Hoang
 * @Last Modified time: 2016-01-11 14:13:20
 */

namespace hmphu\payoneer;

use hmphu\payonee\request\PayeeSignupRequest;
use hmphu\payoneer\request\PayeeSignupAutoPopulationRequest;
use hmphu\payoneer\request\BasicRequest;
use hmphu\payoneer\request\PerformPayoutPaymentRequest;
use hmphu\payoneer\request\GetPaymentStatusRequest;
use hmphu\payoneer\request\PayeeRequest;
use hmphu\payoneer\request\ChangePayeeIdRequest;
use hmphu\payoneer\request\GetPayeesReportRequest;
use hmphu\payoneer\request\BasicPaymentRequest;

/**
 * Class PayoneerApi
 * @package hmphu\payoneer
 */
class PayoneerApi extends ApiAbstract
{
    
    /**
     * @param PayoneerConfig $config
     */
    function __construct(PayoneerConfig $config) {
        parent::__construct($config);
    }
    
    /**
     * The token is unique and is generated by Payoneer specifically for each sign-up session.
     *
     * @param PayeeSignupRequest $request
     * @throws \Exception
     * @return array
     */
    public function getToken(PayeeSignupRequest $request) {
        $response = $this->call('GetToken', $request);
        return $this->xmlToArray($response->getBody()->getContents());
    }
    
    /**
     * The token is unique and is generated by Payoneer specifically for each sign-up session.
     *
     * @param PayeeSignupAutoPopulationRequest $request
     * @throws \Exception
     * @return array
     */
    public function getTokenXML(PayeeSignupAutoPopulationRequest $request) {
        $response = $this->call('GetTokenXML', $request);
        return $this->xmlToArray($response->xml());
    }
    
    /**
     * This method provides the status of the API and payout
     * services (Heart Beep).
     *
     * @return mixed
     */
    public function getApiStatus() {
        $response = $this->call('Echo', new BasicRequest());
        return $this->xmlToArray($response->getBody()->getContents());
    }
    
    /**
     * This method provides the API version.
     *
     * @return mixed
     */
    public function getVersion() {
        $response = $this->call('GetVersion', new BasicRequest());
        return $this->xmlToArray($response->getBody()->getContents());
    }
    
    /**
     * This method, if successful, creates a payment request
     * in the Payoneer system. Prior to issuing payment
     * instructions, the partner’s account balance in the
     * Payoneer system must be credited relative to the
     * payment request. Payout instruction submission will
     * fail if the partner’s account balance does not have
     * sufficient funds to perform the account loads. In
     * addition the payee ID must be active.
     *
     * @param PerformPayoutPaymentRequest $request
     * @return mixed
     */
    public function performPayoutPayment(PerformPayoutPaymentRequest $request) {
        $response = $this->call('PerformPayoutPayment', $request);
        return $this->xmlToArray($response->getBody()->getContents());
    }
    
    /**
     * This method, if successful, reports the status of a
     * payment that was earlier sent to the Payoneer system.
     *
     * @param $payeeId
     * @param $paymentId
     * @return mixed
     */
    public function getPaymentStatus($payeeId, $paymentId) {
        $request = new GetPaymentStatusRequest($payeeId, $paymentId);
        $response = $this->call('GetPaymentStatus', $request);
        return $this->xmlToArray($response->getBody()->getContents());
    }
    
    /**
     * This method returns the partner’s available account balance.
     *
     * @return mixed
     */
    public function getAccountDetails() {
        $request = new BasicRequest();
        $response = $this->call('GetAccountDetails', $request);
        return $this->xmlToArray($response->getBody()->getContents());
    }
    
    /**
     * This method returns details about the requested
     * payee and his status at Payoneer.
     *
     * @param $payeeId
     * @return mixed
     */
    public function getPayeeDetails($payeeId) {
        $request = new PayeeRequest($payeeId);
        $response = $this->call('GetPayeeDetails', $request);
        return $this->xmlToArray($response->getBody()->getContents());
    }
    
    /**
     * This method changes the ID of an existing
     * payee (old) to a new one.
     *
     * @param $oldId
     * @param $newId
     * @return mixed
     */
    public function changePayeeId($oldId, $newId) {
        $request = new ChangePayeeIdRequest($oldId, $newId);
        $response = $this->call('ChangePayeeID', $request);
        return $this->xmlToArray($response->getBody()->getContents());
    }
    
    /**
     * This method returns all payments made to payees,
     * grouped by payment method.
     *
     * @param $startDate
     * @param $endDate
     * @return mixed
     */
    public function getPayeesReport($startDate, $endDate) {
        $request = new GetPayeesReportRequest($startDate, $endDate);
        $response = $this->call('GetPayeesReport', $request);
        return $this->xmlToArray($response->getBody()->getContents());
    }
    
    /**
     * This method returns all payments made to a single payee.
     *
     * @param $payeeId
     * @return mixed
     */
    public function getSinglePayeeReport($payeeId) {
        $request = new PayeeRequest($payeeId);
        $response = $this->call('GetSinglePayeeReport', $request);
        return $this->xmlToArray($response->getBody()->getContents());
    }
    
    /**
     * This method returns an array of all payments that have
     * not yet been claimed.
     *
     * @return mixed
     */
    public function getUnclaimedPayments() {
        $request = new BasicRequest();
        $response = $this->call('GetUnclaimedPaymentsXML', $request);
        return $this->xmlToArray($response->getBody()->getContents());
    }
    
    /**
     * This method returns a CSV string of all payments that have
     * not yet been claimed.
     *
     * @return string
     */
    public function getUnclaimedPaymentsCSV() {
        $request = new BasicRequest();
        $response = $this->call('GetUnclaimedPaymentsCSV', $request);
        return $response->getBody()->getContents();
    }
    
    /**
     * This method cancels a payment that has not yet been
     * processed and loaded to an account.
     *
     * @param $paymentId
     * @return mixed
     */
    public function cancelPayment($paymentId) {
        $request = new BasicPaymentRequest($paymentId);
        $response = $this->call('CancelPayment', $request);
        return $this->xmlToArray($response->getBody()->getContents());
    }
}
